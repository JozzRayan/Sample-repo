pipeline {
    agent any

    stages {
        stage('Code Checkout') {
            steps {
                script {
                    checkout(
                        scm: [
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            userRemoteConfigs: [[
                                credentialsId: 'github-access-token-1',
                                url: 'https://github.com/JozzRayan/Sample-repo.git'
                            ]]
                        ]
                    )
                }
            }
        }

        stage('Pull and Run Terraform Docker Image') {
    steps {
        script {
            // Define the Nexus Docker registry URL and image name
            def nexusRegistryUrl = 'https://nexus.an.opsnow.com'
            def nexusImageName = 'alertnow-docker-agents/hashicorp/alertnow-infra-terraform:latest'
            
            // Define Docker credentials for Nexus
            def dockerCredentials = credentials('nexus') 
            
            // Authenticate Docker with Nexus
            withCredentials([dockerCredentials]) {
                docker.withRegistry(nexusRegistryUrl, 'docker-credentials-id') {
                    def terraformImage = docker.image(nexusImageName)
                    dir('Environment/Dev') {
                        terraformImage.inside('-v $PWD:/terraform-project --entrypoint ""') { c ->
                            /* Run Terraform commands here */
                            sh 'terraform --version'
                            sh 'terraform init'
                            sh 'terraform plan'

                            if (action == 'deploy') {
                                sh 'terraform apply -auto-approve'
                            } else if (action == 'destroy') {
                                sh 'terraform destroy -auto-approve'
                            }
                        }
                    }
                }
            }
        }
    }
}


        stage('Remove Terraform docker image') {
            steps {
                script {
                    sh 'docker rmi hashicorp/terraform:latest'
                }
            }
        }
    }
}
