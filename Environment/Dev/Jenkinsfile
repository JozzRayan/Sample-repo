pipeline {
    agent any

    environment {
        TERRAFORM_IMAGE = 'alertnow-docker-agents/hashicorp/alertnow-infra-terraform:latest'
        TERRAFORM_WORKDIR = 'Environment/Dev'
        AWS_CREDENTIALS_ID = 'aws-secret-key'
    }

    stages {
        stage('Code Checkout') {
            steps {
                checkout(
                    scm: [
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[
                            credentialsId: 'github-access-token-1',
                            url: 'https://github.com/JozzRayan/Sample-repo.git'
                        ]]
                    ]
                )
            }
        }

        stage('Pull and Run Terraform Docker Image') {
            steps {
                script {
                    withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'nexus',
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    ]]) {
                        // Authenticate Docker with Nexus using 'nexus' credentials
                        docker.withRegistry('https://nexus.an.opsnow.com', 'nexus') {
                            // Pull the Terraform Docker image
                            def terraformImage = docker.image(env.TERRAFORM_IMAGE)

                            // Run Terraform commands
                            dir(env.TERRAFORM_WORKDIR) {
                                terraformImage.inside('-v $PWD:/terraform-project --entrypoint ""') { c ->
                                    sh 'terraform --version'
                                    sh 'terraform init'
                                    sh 'terraform plan'

                                    if (action == 'deploy') {
                                        sh 'terraform apply -auto-approve'
                                    } else if (action == 'destroy') {
                                        sh 'terraform destroy -auto-approve'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy Terraform Infrastructure on AWS') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                        credentialsId: env.AWS_CREDENTIALS_ID
                    ]]) {
                        // Initialize and apply Terraform for AWS
                        dir(env.TERRAFORM_WORKDIR) {
                            sh 'terraform init'
                            sh 'terraform plan'

                            if (action == 'deploy') {
                                sh 'terraform apply -auto-approve'
                            } else if (action == 'destroy') {
                                sh 'terraform destroy -auto-approve'
                            }
                        }
                    }
                }
            }
        }

        stage('Remove Terraform Docker Image') {
            steps {
                script {
                    // Explicitly remove the Docker image using the full name
                    sh "docker rmi ${env.TERRAFORM_IMAGE}"
                }
            }
        }
    }
}
